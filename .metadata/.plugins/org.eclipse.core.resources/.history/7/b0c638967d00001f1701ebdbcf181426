package controller;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.PagingVO;
import handler.FileRemoveHandler;
import handler.PagingHandler;
import net.coobird.thumbnailator.Thumbnails;
import service.BoardService;
import service.BoardServiceImpl;

@WebServlet("/brd/*") //경로
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	//로그 객체 생성(Logger slf4j로 import)
	private static final Logger log = LoggerFactory.getLogger(BoardController.class);
	//jsp에서 받은 요청을 처리, 처리결과를 다른 jsp로 보내주는 역할
	private RequestDispatcher rdp;
	private String destPage=""; //보내는 주소(목적지)를 저장하는 String
	private int isOk; //DB구문 체크 값 저장 변수
	private BoardService bsv; //인터페이스로 service 생성
	private String savePath; //파일 업로드 저장 경로
       
    public BoardController() {
    	//생성자
        bsv = new BoardServiceImpl(); //class로 생성 bsv 객체를 구현
    }

	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//실제처리 메서드
		log.info("잘들어오는지 test!");
		
		//매개변수(request, response) 객체의 인코딩 설정
		request.setCharacterEncoding("utf-8"); //요청객체
		response.setCharacterEncoding("utf-8"); //응답객체
		//응답객체 => 화면을 만들어서 응답 -> jsp 형식으로 데이터를 보내줌
		response.setContentType("text/html; charset=UTF-8"); //응답객체가 html 객체로 전송
		
		String uri = request.getRequestURI(); //jsp에서 오는 요청 주소를 받는 객체
		log.info(uri);
		
		String path = uri.substring(uri.lastIndexOf("/")+1); //register만 빼기위해
		log.info(path);
		
		switch(path) {
		case "register":
			destPage = "/board/register.jsp";
			break;
		case "insert":
			try {
				//첨부파일이 있을 때 (multipart/form-data를 사용할 때) insert 방식
				//파일을 업로드할 물리적인 경로 설정(getRealPath = webapp)
				savePath = getServletContext().getRealPath("/_fileUpload");
				log.info("savePath : "+savePath);				
				//파일 객체(savePath까지 경로 설정)
				File fileDir = new File(savePath);
				log.info(">>>>fileDir {}",fileDir);				
				
				//파일을 저장할 임시공간을 마련
				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				fileItemFactory.setRepository(fileDir); //저장할 위치 File 객체로 지정
				fileItemFactory.setSizeThreshold(1024*1024*3); //파일 저장을 위한 임시메모리
				
				BoardVO bvo = new BoardVO(); //String을 저장할 공간
				
				//multipart/form-data 형식으로 넘어온 request 객체를 다루기 쉽게 변환해주는 역할
				ServletFileUpload fileUpload = new ServletFileUpload(fileItemFactory);
				
				//들어오는 String과 파일을 key:value 형식으로 저장
				List<FileItem> itemList = fileUpload.parseRequest(request);
				for(FileItem item : itemList) {
					//title, writer, content => text  / imageFile => image
					//getFieldName => register에서 보내는 input name
					switch(item.getFieldName()) {
					case "title":
						String title = item.getString("utf-8");
						bvo.setTitle(title);
						break;
					case "writer":
						bvo.setWriter(item.getString("utf-8"));
						break;
					case "content":
						bvo.setContent(item.getString("utf-8"));
						break;
					case "imageFile":
						//이미지 파일 여부 체크
						if(item.getSize() > 0) { //이미지가 있으면
							//파일 이름 추출
							//getName() : 순수 파일이름 + 경로 ~~ /name.jpg (여기서 name만 추출하는 과정)
							String fileName = item.getName()
									.substring(item.getName().lastIndexOf(File.separator)+1);
							//File.separator : 파일 경로 기호 => 운영체제마다 다를 수 있어 자동변환
							//시스템의 시간을 이용하여 파일을 구분 / 시간_dog.jpg
							fileName = System.currentTimeMillis()+"_"+fileName;
							
							//저장용도로 파일의 path 설정
							File uploadFilePath = new File(fileDir+File.separator+fileName);
							log.info(">>>>uploadFilePath>>> {}",uploadFilePath);
							
							//저장
							try {
								item.write(uploadFilePath); //객체를 디스크에 쓰기
								bvo.setImageFile(fileName); //bvo에 저장할 값(시간_name.jpg) => DB에 저장
								
								//썸네일 작업 : 리스트 페이지에서 트래픽 과다 사용 방지
								Thumbnails.of(uploadFilePath)
								.size(75, 75)
								.toFile(new File(fileDir+File.separator+"_th_"+fileName));
							} catch (Exception e) {
								log.info(">>>>file writer on disk error");
								e.printStackTrace();
							}
						}
						break;
					}
				}
				log.info(">>>>bvo {}",bvo);
				int isOk = bsv.register(bvo);
				log.info("insert "+(isOk>0?"성공 ":"실패 ")+isOk);
				
				destPage="/index.jsp";
				//jsp 화면에서 가져온 파라미터 저장
				//모든 파라미터는 String으로 들어옴
				//첨부파일이 없을 때 (multipart/form-data가 아닐 때) insert 방식
//				String title = request.getParameter("title");
//				String writer = request.getParameter("writer");
//				String content = request.getParameter("content");
//				
//				BoardVO bvo = new BoardVO(title, writer, content);
//				log.info("insert 객체 >>>> {}", bvo);
//				int isOk = bsv.register(bvo);
//				log.info("insert "+(isOk>0?"성공 ":"실패 ")+isOk);
//				
//				destPage="/index.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "list":
			try {
				//index에서 list 버튼을 클릭하면 
				//컨트롤러에서 DB의 전체 리스트를 요청
				//전체 리스트를 list.jsp로 가져가서 뿌리기
				//PagingVO 객체 설정
				PagingVO pgvo = new PagingVO(); //1페이지, 개수10개, 시작번지0 / list.jsp의 type, keyword
				
				if(request.getParameter("pageNum")!=null) {	
					int pageNum = Integer.parseInt(request.getParameter("pageNum"));
					int qty = Integer.parseInt(request.getParameter("qty"));
					String type = request.getParameter("type");
					String keyword = request.getParameter("keyword");
					pgvo = new PagingVO(pageNum, qty, type, keyword); 
				}
				
				//paging을 반영한 리스트 추출
				List<BoardVO> list = bsv.getList(pgvo);
				//totalCount DB에서 검색해서 가져오기
				int totalCount = bsv.getTotal(pgvo);
				PagingHandler ph = new PagingHandler(pgvo, totalCount);
				log.info("ph >>>>> {}", ph);

				
//				List<BoardVO> list = bsv.getList();
//				log.info("list >>>>> {}", list);
				request.setAttribute("list", list);
				request.setAttribute("ph", ph);
				destPage = "/board/list.jsp";
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "detail": case "modify":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				BoardVO bvo = bsv.getDetail(bno);
				log.info("detail >>>>>> {} ",bvo);
				request.setAttribute("bvo", bvo);
				destPage = "/board/"+path+".jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "update":
			try {
				savePath = getServletContext().getRealPath("/_fileUpload");
				File fileDir = new File(savePath);
				
				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				fileItemFactory.setRepository(fileDir);
				fileItemFactory.setSizeThreshold(1024*1024*3);
				
				BoardVO bvo = new BoardVO();
				
				ServletFileUpload fileUpload = new ServletFileUpload(fileItemFactory);
				
				List<FileItem> itemList = fileUpload.parseRequest(request);
				
				String old_file = null;
				
				for(FileItem item : itemList) {
					switch(item.getFieldName()) {
					case "bno":
						bvo.setBno(Integer.parseInt(item.getString("utf-8")));
						break;	
					case "title":
						String title = item.getString("utf-8");
						bvo.setTitle(title);
						break;
					case "content":
						bvo.setContent(item.getString("utf-8"));
						break;
					case "imageFile":
						//기존파일 => 있을수도, 없을수도
						//없으면 null값이 들어옴
						old_file = item.getString("utf-8");
						break;
					case "newFile":
						//새로 추가된 파일 => 있을수도, 없을수도
						if(item.getSize()>0) {
							//새로운 등록파일이 있다면
							if(old_file!=null) {
								//old_file 삭제작업
								//fileRemoveHandler 통해서 파일 삭제 작업 진행
								FileRemoveHandler fileHandler = new FileRemoveHandler();
								isOk = fileHandler.deleteFile(path, old_file);
							}
							//새로운 파일 작업
							String fileName = item.getName()
									.substring(item.getName().lastIndexOf(File.separator)+1);
							log.info(">>>>> new File Name >>> {}", fileName);
							
							fileName = System.currentTimeMillis()+"_"+fileName;
							File uploadFilePath = new File(fileDir+File.separator+fileName);
							
							try {
								item.write(uploadFilePath);
								bvo.setImageFile(fileName);
								
								Thumbnails.of(uploadFilePath)
								.size(75,75)
								.toFile(new File(fileDir+File.separator+"_th_"+fileName));
							} catch (Exception e) {
								log.info("File Writer Update Error");
								e.printStackTrace();
							}
						} else {
							//기존 파일은 있지만 새로운 이미지 파일이 없다면
							bvo.setImageFile(old_file); //기존 객체 bvo에 담기
						}
						break;
					}
				}
				int isOk = bsv.update(bvo);
				log.info(">>>bvo {}",bvo);
				log.info("update "+(isOk>0?"성공 ":"실패 ")+isOk);
				destPage="list"; //내부 list case를 한번 타고 실행(데이터를 가지고감) case:"list"로 이동
				
//				int bno = Integer.parseInt(request.getParameter("bno"));
//				String title = request.getParameter("title");
//				String content = request.getParameter("content");
//				BoardVO bvo = new BoardVO(bno, title, content);
//				int isOk = bsv.update(bvo);
//				
//				log.info("update "+(isOk>0?"성공 ":"실패 ")+isOk);
//				destPage="detail"; //내부 list case를 한번 타고 실행(데이터를 가지고감) case:"list"로 이동
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "remove":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				//댓글, 파일 같이 삭제
				//bno주고 파일이름 찾아오기(DB에서)
				//찾아온 이름이 있다면 FileRemoveHandler를 이용하여 삭제
				String imageFileName = bsv.getFileName(bno);
				log.info(imageFileName);
				int isDel=0;
				if(imageFileName!=null) {
					FileRemoveHandler fh = new FileRemoveHandler();
					isDel = fh.deleteFile(savePath, imageFileName);
				}
				
				//bno로 댓글+게시글 삭제 요청 => serviceImple에서 cdao에게 요청
				int isOk = bsv.delete(bno);
			                   	
				log.info("delete "+(isOk>0?"성공 ":"실패 ")+isOk);
				destPage="list"; //list.jsp로 이동하면 데이터없이 페이지만 이동(화면에 아무것도 뜨지않음)
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		}

		
		//목적지주소(destPage)로 데이터를 전달(RequestDispatcher)
		rdp = request.getRequestDispatcher(destPage);
		//요청에 필요한 객체를 가지고 destPage에 적힌 경로로 이동
		rdp.forward(request, response);
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// service 메서드 호출해서 처리
		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// service 메서드 호출해서 처리
		service(request, response);
	}

}
